<?php

/**
 * @module_name gusev_analytics_page
 */

        const ADMIN_CONFIG_GUSEV_ANALYTICS_PAGES = 'admin/config/gusev_analytics/page';

/**
 * Implements hook_menu().
 */
function gusev_analytics_page_menu() {
    $items[ADMIN_CONFIG_GUSEV_ANALYTICS_PAGES] = array(
        'title' => t('Pages analytics'),
        'page callback' => 'gusev_analytics_admin_page',
        'access arguments' => array('administer users'),
        'file' => 'gusev_analytics_page.page.inc',
        'file path' => drupal_get_path('module', 'gusev_analytics_page')
    );
    return $items;
}

/**
 * Implements hook_theme().
 */
function gusev_analytics_page_theme() {
    return array(
        'gusev_analytics_page_statistic' => array(
            'variables' => array(),
            'template' => 'gusev-analytics-page-statistic',
        ),
    );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gusev_analytics_page_preprocess_node(&$variables) {
    if ($variables['page'] == true) {
        global $user;
        if ($user->uid != 0) {
            $time = time();
            db_merge('gusev_analytics_page_pages_viewed')
                    ->key(
                            array(
                                'uid' => $user->uid,
                                'nid' => $variables['nid'],
                                'viewing_time' => $time
                            )
                    )
                    ->fields(
                            array(
                                'uid' => $user->uid,
                                'nid' => $variables['nid'],
                                'viewing_time' => $time
                            )
                    )
                    ->execute();



            /*  db_insert('gusev_analytics_page_pages_viewed')
              ->fields(array(
              'uid' => $user->uid,
              'nid' => $variables['nid'],
              ))
              ->execute(); */
        }
    }
}

function _gusev_analytics_page_statistic_render() {
    if($_SESSION['gusev_analytics_pages_form']['error'] == TRUE){
        return '';
    }
    $filter_data = isset($_SESSION['gusev_analytics_pages_form']) ? $_SESSION['gusev_analytics_pages_form'] : array();
    $type = $filter_data['type'][0];
    $specialization = $filter_data['specialization'][0];
    $date_begin = strtotime($filter_data['date_begin'][0]);
    $date_end   = strtotime($filter_data['date_end'][0]);
    $period = array('begin' =>$date_begin, 'end' => $date_end);
    switch ($type) {
        case 0:
            $pages_viewed = _gusev_analytics_page_get_pages_viewed($specialization, $period);
            $total =        _gusev_analytics_page_get_pages_viewed_total($specialization, $period)[0]->viewed;
            break;
        case 1:
            $pages_viewed = _gusev_analytics_page_get_unique_pageviews($specialization, $period);
            $total =        _gusev_analytics_page_get_unique_pageviews_total($specialization, $period)[0]->viewed;
            break;
        default:
            $pages_viewed = _gusev_analytics_page_get_pages_viewed($specialization, $period);
            $total =        _gusev_analytics_page_get_pages_viewed_total($specialization, $period)[0]->viewed;
            break;
    }

    $header = array(t('Title'), t('Viewed'));
    $rows = array();
    $rows[] = array('<strong>Всего</strong>', '<strong>'.$total.'</strong>'); 
    foreach ($pages_viewed as $line) {
        $title = '<a href="http://'.$_SERVER['HTTP_HOST'].'/node/'.$line->nid.'">'.$line->title.'</a>';
        
        $rows[] = array($title, $line->viewed);
    }

    $pages_viewed = theme('table', array('header' => $header, 'rows' => $rows));
    $return['pages_viewed'] = $pages_viewed;
    return theme('gusev_analytics_page_statistic', $return);
}

function _gusev_analytics_page_get_pages_viewed($specialization,$period = array()) {
    $query = db_select('gusev_analytics_page_pages_viewed', 'pv');
    $query->fields('pv', array('nid'));
    if ($specialization != '-1') {
        $query->innerJoin('field_data_field_specialization', 'specialization', 'specialization.entity_id = pv.uid');
        $query->where('specialization.field_specialization_tid = :tid and pv.viewing_time BETWEEN :begin AND :end', 
                       array(':tid' => $specialization, 'begin' => $period['begin'],  'end' => $period['end']));
    }else{
        $query->where('pv.viewing_time BETWEEN :begin AND :end', array('begin' => $period['begin'],  'end' => $period['end']));
    }
    $query->innerJoin('node', 'n', 'n.nid = pv.nid');
    $query->fields('n', array('title'));
    $query->addExpression('COUNT(pv.uid)', 'viewed');
    $query->groupBy('pv.nid');
    $query->orderBy('viewed', 'DESC');
    return $query->execute()->fetchAll();
    //    SELECT node.title, nid, COUNT( uid ) AS viewed
    //    FROM  `gusev_analytics_page_pages_viewed` 
    //    join node on node.nid = gusev_analytics_page_pages_viewed.nid
    //    GROUP BY uid
    //    ORDER BY  `viewed` ASC 
}

function _gusev_analytics_page_get_pages_viewed_total($specialization,$period = array()) {
    $query = db_select('gusev_analytics_page_pages_viewed', 'pv');
    if ($specialization != '-1') {
        $query->innerJoin('field_data_field_specialization', 'specialization', 'specialization.entity_id = pv.uid');
        $query->where('specialization.field_specialization_tid = :tid and pv.viewing_time BETWEEN :begin AND :end', 
                       array(':tid' => $specialization, 'begin' => $period['begin'],  'end' => $period['end']));
    }else{
        $query->where('pv.viewing_time BETWEEN :begin AND :end', array('begin' => $period['begin'],  'end' => $period['end']));
    }
    $query->innerJoin('node', 'n', 'n.nid = pv.nid');
    $query->addExpression('COUNT(pv.uid)', 'viewed');
    return $query->execute()->fetchAll();
}

function _gusev_analytics_page_get_unique_pageviews($specialization,$period = array()) {
    $query = db_select('gusev_analytics_page_pages_viewed', 'pv');
    $query->fields('pv', array('nid'));
    if ($specialization != '-1') {
        $query->innerJoin('field_data_field_specialization', 'specialization', 'specialization.entity_id = pv.uid');
        $query->where('specialization.field_specialization_tid = :tid and pv.viewing_time BETWEEN :begin AND :end', 
                       array(':tid' => $specialization, 'begin' => $period['begin'],  'end' => $period['end']));
    }else{
        $query->where('pv.viewing_time BETWEEN :begin AND :end', array('begin' => $period['begin'],  'end' => $period['end']));
    }
    $query->innerJoin('node', 'n', 'n.nid = pv.nid');
    $query->fields('n', array('title'));
    $query->addExpression('COUNT(DISTINCT pv.uid)', 'viewed');
    $query->groupBy('pv.nid');
    $query->orderBy('viewed', 'DESC');
    return $query->execute()->fetchAll();
    //    SELECT node.title, nid, COUNT(DISTINCT uid ) AS viewed
    //    FROM  `gusev_analytics_page_pages_viewed` 
    //    join node on node.nid = gusev_analytics_page_pages_viewed.nid
    //    GROUP BY uid
    //    ORDER BY  `viewed` ASC 
}
function _gusev_analytics_page_get_unique_pageviews_total($specialization,$period = array()) {
    $query = db_select('gusev_analytics_page_pages_viewed', 'pv');
    if ($specialization != '-1') {
        $query->innerJoin('field_data_field_specialization', 'specialization', 'specialization.entity_id = pv.uid');
        $query->where('specialization.field_specialization_tid = :tid and pv.viewing_time BETWEEN :begin AND :end', 
                       array(':tid' => $specialization, 'begin' => $period['begin'],  'end' => $period['end']));
    }else{
        $query->where('pv.viewing_time BETWEEN :begin AND :end', array('begin' => $period['begin'],  'end' => $period['end']));
    }
    $query->innerJoin('node', 'n', 'n.nid = pv.nid');
    $query->addExpression('COUNT(DISTINCT pv.uid)', 'viewed');
    return $query->execute()->fetchAll();
}